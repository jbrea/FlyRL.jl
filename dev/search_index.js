var documenterSearchIndex = {"docs":
[{"location":"api/","page":"-","title":"-","text":"Modules = [FlyRL]\nPages = [\"io.jl\",\n         \"encoders.jl\",\n         \"mlp.jl\",\n         \"fitting.jl\",\n         \"models.jl\",\n         \"preprocessor.jl\",\n         \"plotting.jl\",\n         \"summary_stats.jl\",\n         \"simulators.jl\"]","category":"page"},{"location":"api/#FlyRL.preprocess-Tuple{Any}","page":"-","title":"FlyRL.preprocess","text":"preprocess(\n    df;\n    filter,\n    window,\n    initial_outlier_tolerance,\n    encoders,\n    warn_outliers,\n    drop_outliers,\n    subsample_resolution\n)\n\n\nPreprocess data frame df.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.read-Tuple{Any, Any}","page":"-","title":"FlyRL.read","text":"read(root, f; preprocess, kwargs...)\n\n\nRead track f in directory root and corresponding time, shock and pattern file. Returns a DataFrame. kwargs are passed to preprocess.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.read_directory-Tuple{Any}","page":"-","title":"FlyRL.read_directory","text":"read_directory(dir; verbosity, pattern, kwargs...)\n\n\nRead all tracks in directory dir. Uses read and passes kwargs to preprocess.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.AngleEncoder","page":"-","title":"FlyRL.AngleEncoder","text":"AngleEncoder()\n\nEncodes angles between subsequent orientations.\n\nConvention: the same row should contain the delta values that lead to the current value, i.e. delta values should start with missing.\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.AngleEncoder2D","page":"-","title":"FlyRL.AngleEncoder2D","text":"AngleEncoder2D()\n\nEncodes angles as (sin(angle), cos(angle)) (see also AngleEncoder).\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.ArmEncoder-Tuple{}","page":"-","title":"FlyRL.ArmEncoder","text":"ArmEncoder(; with_outliers)\n\n\nEncodes arms of the maze as \"left\", \"middle\", \"right\", \"center\". Points outside the maze are marked as \"outlier\" if with_outliers = true.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.ClosestWallEncoder","page":"-","title":"FlyRL.ClosestWallEncoder","text":"ClosestWallEncoder(encoder)\n\nEncodes the closest wall as determined with encoder (either FourWallsEncoder, SixWallsEncoder or EightWallsEncoder).\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.ColorEncoder-Tuple{}","page":"-","title":"FlyRL.ColorEncoder","text":"ColorEncoder(; colordict, with_outliers)\n\n\nEncode color based on track.pattern.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.ColumnPicker","page":"-","title":"FlyRL.ColumnPicker","text":"ColumnPicker(colname::Symbol)\n\nPicks a column from a data frame.\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.DeltaPositionEncoder","page":"-","title":"FlyRL.DeltaPositionEncoder","text":"DeltaPositionEncoder()\n\nEncodes Δx and Δy from x and y.\n\nConvention: the same row should contain the delta values that lead to the current value, i.e. delta values should start with missing.\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.DeltaPositionIndexEncoder","page":"-","title":"FlyRL.DeltaPositionIndexEncoder","text":"DeltaPositionIndexEncoder(; maxradius = 20, stepsize = 1)\n\nEncodes relative positions (Δx, Δy) with an integer, based on a 2D grid with stepsize and largest relative position Δx^2 + Δy^2 = maxradius^2.\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.DeltaTimeEncoder","page":"-","title":"FlyRL.DeltaTimeEncoder","text":"DeltaTimeEncoder()\n\nEncodes Δt from t; uses default 0.15, if t is missing.\n\nConvention: the same row should contain the delta values that lead to the current value, i.e. delta values should start with missing.\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.DurationPerStateEncoder","page":"-","title":"FlyRL.DurationPerStateEncoder","text":"DurationPerStateEncoder(encoder)\n\nEncode the duration that is spent in a given state.\n\nExample\n\nencode(DurationPerStateEncoder(ShockArmEncoder()), random_track()) |> DataFrame\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.DynamicCompressEncoder-Union{Tuple{N}, Tuple{Union{Symbol, Tuple{Vararg{Symbol, N}}}, Vararg{Any}}} where N","page":"-","title":"FlyRL.DynamicCompressEncoder","text":"DynamicCompressEncoder(compress_on, encoders...)\n\nMerge subsequent states of compress_on into one state.\n\nExample\n\nencode(DynamicCompressEncoder(StanHMCAdaptor()), random_track()) |> DataFrame\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.FutureDeltaTimeEncoder","page":"-","title":"FlyRL.FutureDeltaTimeEncoder","text":"FutureDeltaTimeEncoder()\n\nSame as DeltaTimeEncoder but offset by one, i.e. the same row contains the delta value that leads to the next value.\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.InShockArmEncoder","page":"-","title":"FlyRL.InShockArmEncoder","text":"InShockArmEncoder()\n\nEncodes if the position is in the shock arm.\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.LevelEncoder","page":"-","title":"FlyRL.LevelEncoder","text":"LevelEncoder(encoder)\n\nEncode level as an integer for a categorical encoder (like ShockArmEncoder).\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.MarkovKEncoder-Tuple{Any, Vararg{Any}}","page":"-","title":"FlyRL.MarkovKEncoder","text":"MarkovKEncoder(K, encoders)\n\n\nCreate copies of the original encoders with offsets up to K. Appends ˌk to copy with offset k.\n\nExample\n\nencode(MarkovKEncoder(3, DynamicCompressEncoder(:arm, ArmEncoder())), random_track()) |> DataFrame\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.OrientationEncoder","page":"-","title":"FlyRL.OrientationEncoder","text":"OrientationEncoder()\n\nEncodes orientations based on Δx and Δy.\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.SemanticEncoder3-Tuple{}","page":"-","title":"FlyRL.SemanticEncoder3","text":"SemanticEncoder3(; with_outliers)\n\n\nEncodes positions of the maze as \"center\", \"arm\" or \"turn\". Points outside the maze are marked as \"outlier\" if with_outliers = true.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.SemanticEncoder7-Tuple{}","page":"-","title":"FlyRL.SemanticEncoder7","text":"SemanticEncoder7(; with_outliers)\n\n\nEncodes positions of the maze as \"center\", \"left arm\", \"left turn\", \"middle arm\", \"middle turn\", \"right arm\", \"right turn\". Points outside the maze are marked as \"outlier\" if with_outliers = true.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.ShockArmEncoder-Tuple{}","page":"-","title":"FlyRL.ShockArmEncoder","text":"ShockArmEncoder(; with_outliers)\n\n\nEncodes arms of the maze as \"neutral A\", \"neutral B\", \"shock\" and \"center\". Points outside the maze are marked as \"outlier\" if with_outliers = true.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.SpeedEncoder-Tuple{}","page":"-","title":"FlyRL.SpeedEncoder","text":"SpeedEncoder(; outlier_threshold, return_outliers)\n\n\nEncode the speed based on vx and vy (see VelocityEncoder). Speed values above outlier_threshold are returned as missing. If return_outliers = true, return also a vector of outlier values.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.VectorEncoder-Tuple","page":"-","title":"FlyRL.VectorEncoder","text":"VectorEncoder(encoders; T, dropmissing, intercept)\n\n\nEncode multiple encodings in a single vector. Categorical encoders are one-hot encoded.\n\nExample\n\nencode(VectorEncoder(ShockArmEncoder(), SpeedEncoder()), random_track(N = 10)) |> DataFrame\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.VelocityEncoder","page":"-","title":"FlyRL.VelocityEncoder","text":"VelocityEncoder()\n\nEncodes velocities based on Δx, Δy and Δt.\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.EightWallsEncoder-Tuple{}","page":"-","title":"FlyRL.EightWallsEncoder","text":"EightWallsEncoder(; max_distance = 40, scale = max_distance, stepsize = 1.5)\n\nEncodes (x, y, ox, oy)-position-orientation tuples to relative distances to the next wall at 0, 45, 90, 135, 180, 225, 270 and 315 degrees relative to the orientation.\n\nIf the distance of the wall is max_distance and scale == max_distance the returned value is 1. The stepsize (in pixels) controls the granularity at which the distance to the wall is computed.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.FourWallsEncoder-Tuple{}","page":"-","title":"FlyRL.FourWallsEncoder","text":"FourWallsEncoder(; max_distance = 40, scale = max_distance, stepsize = 1.5)\n\nEncodes (x, y, ox, oy)-position-orientation tuples to relative distances to the next wall at 0, 90, 180 and 270 degrees relative to the orientation.\n\nIf the distance of the wall is max_distance and scale == max_distance the returned value is 1. The stepsize (in pixels) controls the granularity at which the distance to the wall is computed.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.SixWallsEncoder-Tuple{}","page":"-","title":"FlyRL.SixWallsEncoder","text":"SixWallsEncoder(; max_distance = 40, scale = max_distance, stepsize = 1.5)\n\nEncodes (x, y, ox, oy)-position-orientation tuples to relative distances to the next wall at 0, 45, 135, 180, 225 and 315 degrees relative to the orientation.\n\nIf the distance of the wall is max_distance and scale == max_distance the returned value is 1. The stepsize (in pixels) controls the granularity at which the distance to the wall is computed.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.decode-Tuple{FlyRL.VectorEncoder, Any}","page":"-","title":"FlyRL.decode","text":"decode(e, vectors)\n\n\nInverse of encode(VectorEncoder(), track).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.encode!-Tuple{Any, DataFrames.DataFrame}","page":"-","title":"FlyRL.encode!","text":"Encode track with encoder and store result in data frame track.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.encode-Tuple{Any, DataFrames.DataFrame}","page":"-","title":"FlyRL.encode","text":"Encode track with encoder.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.DenseLayer-Tuple{Any, Any, Any}","page":"-","title":"FlyRL.DenseLayer","text":"DenseLayer(Din, Dout, f; T, w, b)\n\n\nMakes a dense layer.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.MLP-Tuple","page":"-","title":"FlyRL.MLP","text":"MLP(layers)\n\n\nMakes a multi-layer perceptron.\n\nExample\n\nmlp = MLP(DenseLayer(10, 20, relu), DenseLayer(20, 1, identity))\nmlp(rand(10))\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.train","page":"-","title":"FlyRL.train","text":"train(agent, data)\ntrain(\n    agent,\n    data,\n    params;\n    epochs,\n    verbosity,\n    opt,\n    print_interval,\n    lopt,\n    maxtime,\n    optim_options,\n    maxeval,\n    lb,\n    ub,\n    fixed,\n    batchsize\n)\n\n\nTrain agent on preprocessed data with initial parameters params (=params(model) by default).\n\nKeep the default opt = :MLSL for small scale problems and set opt = Adam(), batchsize = 32, if training on minibatches of size 32 is desired. Fix parameter values with e.g. fixed = (; η = 0.). Gradient evaluation is multi-threaded, if julia is started with multiple threads, e.g. bash> julia -t8.\n\n\n\n\n\n","category":"function"},{"location":"api/#FlyRL.train-2","page":"-","title":"FlyRL.train","text":"train(model, data)\ntrain(model, data, params; kwargs...)\n\n\nTrain a model to a multiple data frames data with initial parameters params (=params(model) by default).\n\n\n\n\n\n","category":"function"},{"location":"api/#FlyRL.train-3","page":"-","title":"FlyRL.train","text":"train(model, data)\ntrain(\n    model,\n    data,\n    params;\n    multi_threading,\n    nthreads,\n    kwargs...\n)\n\n\nTrain a model to a single data frame data with initial parameters params (=params(model) by default).\n\n\n\n\n\n","category":"function"},{"location":"api/#FlyRL.DeltaPositionModel-Tuple{}","page":"-","title":"FlyRL.DeltaPositionModel","text":"DeltaPositionModel(\n;\n    nhidden,\n    σ,\n    T,\n    dx,\n    dy,\n    f,\n    encoder,\n    kwargs...\n)\n\n\nMake a DeltaPositionModel.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.Model","page":"-","title":"FlyRL.Model","text":"Model(agent, preprocessor)\n\nMakes a model.\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.PolicyGradientAgent-Tuple{}","page":"-","title":"FlyRL.PolicyGradientAgent","text":"PolicyGradientAgent(; Din, Dout, T, model, update_lag)\n\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.StationaryAgent-Tuple{}","page":"-","title":"FlyRL.StationaryAgent","text":"StationaryAgent(; Dout, model, T)\n\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.logprob-Tuple{FlyRL.Model, DataFrames.DataFrame, Any}","page":"-","title":"FlyRL.logprob","text":"logprob(model, data, params)\n\n\nCompute the log-probability of the data given the model with parameters params.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.Preprocessor-Tuple{}","page":"-","title":"FlyRL.Preprocessor","text":"Preprocessor(; input, target, shock, target_offset)\n\n\nDefine a preprocessor with input encoder input, target encoder target and shock encoder shock (= ColumnPicker(:shock) by default).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.preprocess-Tuple{FlyRL.Preprocessor, Any}","page":"-","title":"FlyRL.preprocess","text":"preprocess(p, data)\n\n\nPreprocess data with preprocessor p (see also Preprocessor).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.plot_compare_probs-Tuple{Any, Any}","page":"-","title":"FlyRL.plot_compare_probs","text":"plot_compare_probs(track1, track2; ranges, f, kwargs...)\n\n\nCompare the probabilities of track1 and track2 for being in certain states at different temporal ranges. The default ranges are (0, 1) (full range), (0, .5) (first half) (.5, 1)) (second half). kwargs are passed to plot_probs.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.plot_maze-Tuple{Any}","page":"-","title":"FlyRL.plot_maze","text":"plot_maze(track; f)\n\n\nPlot the outline of a maze and the positions of a fly (track.x and track.y). See also plot_track. f = Makie.Figure().\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.plot_probs-Tuple{DataFrames.DataFrame}","page":"-","title":"FlyRL.plot_probs","text":"plot_probs(track; preprocessor, kwargs...)\n\n\nPlot probabilities (frequencies) of being in certain states. By default the states defined by the ShockArmEncoder are taken, i.e. preprocessor = Preprocessor(input = DynamicCompressEncoder(:shock_arm, ShockArmEncoder()),                              target = ShockArmEncoder())\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.plot_summaries-Tuple{Any}","page":"-","title":"FlyRL.plot_summaries","text":"plot_summaries(tracks; f, summaries)\n\n\nPlot some summary statistics for a collection of tracks.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.plot_summary-Tuple{Any, Any}","page":"-","title":"FlyRL.plot_summary","text":"plot_summary(summary, tracks; f)\n\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.plot_track-Tuple{Any}","page":"-","title":"FlyRL.plot_track","text":"plot_track(track; f)\n\n\nPlots a track as a function of time (see plot_track_3D) and on the maze outline (see plot_maze).\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.plot_track_3D-Tuple{Any}","page":"-","title":"FlyRL.plot_track_3D","text":"plot_track_3D(\n    track;\n    f,\n    cm_per_pixel,\n    ylabel,\n    xlabel,\n    zlabel,\n    perspectiveness,\n    elevation,\n    azimuth,\n    viewmode,\n    alignmode,\n    protrusions,\n    yticks,\n    zticks\n)\n\n\nPlots track.x and track.y as a function of track.t.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.ChangeOf","page":"-","title":"FlyRL.ChangeOf","text":"ChangeOf(stat)\nChangeOf(stat, midpoint)\n\n\nCompute the change in statistics stat before and after the midpoint (= 0.5 by default).\n\nExample\n\nsummarize(ChangeOf(RelativeTimeInShockArm()), track)\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.RelativeTimeInState-Tuple{Any, Any}","page":"-","title":"FlyRL.RelativeTimeInState","text":"RelativeTimeInState(encoder, state; exclude)\n\n\nCompute the relative duration spent in state in the encoding defined by the encoder. States can be excluded with exclude = [\"state1\", \"state2\"].\n\nExample\n\nsummarize(RelativeTimeInState(SemanticEncoder7(), \"left turn\", exclude = [\"center\"]), track)\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.RelativeVisitsToState-Tuple{Any, Any}","page":"-","title":"FlyRL.RelativeVisitsToState","text":"RelativeVisitsToState(e, key; exclude)\n\n\nCompute the relative number of visits to state in the encoding defined by the encoder. States can be excluded with exclude = [\"state1\", \"state2\"].\n\nExample\n\nsummarize(RelativeVisitsToState(SemanticEncoder7(), \"left turn\", exclude = [\"center\"]), track)\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.RelativeTimeInShockArm-Tuple{}","page":"-","title":"FlyRL.RelativeTimeInShockArm","text":"RelativeTimeInShockArm()\n\n\nRelative time in shock arm.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.RelativeVisitsToShockArm-Tuple{}","page":"-","title":"FlyRL.RelativeVisitsToShockArm","text":"RelativeVisitsToShockArm()\n\n\nRelative visits to shock arm.\n\n\n\n\n\n","category":"method"},{"location":"api/#FlyRL.Environment","page":"-","title":"FlyRL.Environment","text":"Environment(; preprocessor,\n              pattern = \"GBB\",\n              shock = shock_function(pattern),\n              state = rand_state(preprocessor, pattern, shock))\n\nDefine an environment that can be used for simulations.\n\n\n\n\n\n","category":"type"},{"location":"api/#FlyRL.random_track-Tuple{}","page":"-","title":"FlyRL.random_track","text":"random_track(; N, pattern, shock)\n\n\n\n\n\n\n","category":"method"},{"location":"#FlyRL","page":"FlyRL","title":"FlyRL","text":"","category":"section"},{"location":"","page":"FlyRL","title":"FlyRL","text":"Documentation goes here.","category":"page"}]
}
